#!/usr/local/bin/node
/* eslint-disable no-unused-vars */

// Prime the db with some dummy photo data
const {
  _,
  assert,
  mongoose,
  dbConnect,
  dbDisconnect,
  stringify
} = require('../lib/utils')

const { MONGODB_URI } = require('../etc/constants')

const mocks = require('../etc/mocks')

// process.on('unhandledRejection', (reason, p) => {
//   console.error('Unhandled Rejection at:', p, 'reason:', reason)
// })

async function dropTable (mock) {
  assert(_.isNonEmptyString(mock.name), 'mock must have a name')
  assert(mongoose.connection.db !== null)
  return mongoose.connection.dropCollection(mock.name)
}

async function saveRecord (mock, record) {
  assert(_.isNonEmptyString(mock.name), 'mock must have a name')
  const newRecord = new mock.model(record) // eslint-disable-line new-cap
  return newRecord.save()
}

async function primeTable (mock) {
  const { name, data } = mock
  console.log(`priming ${name} collection...`)
  const promises = []
  data.forEach(d => {
    promises.push(
      saveRecord(mock, d).catch(err =>
        console.error(`failed to save record to ${mock.name}: ${err}`)
      )
    )
  })
  promises.push(() => console.log(`finished priming ${mock.name}`))
  return promises
}

async function completeTable (mock) {
  console.log(`priming ${mock.name} is complete`)
}

const run = async () => {
  console.log('connecting to db')
  await mongoose.connect(MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
    // reconnectTries: Number.MAX_VALUE,
    // reconnectInterval: 5000,
    // useFindAndModify: false
    // useCreateIndex: true,
  })
  console.log('connected')

  let mock = mocks.albums
  console.log('dropping albums')
  if(mongoose.)
  await dropTable(mock)

  console.log('complete')

  // .catch(err => )
  // .then(() => console.log('connected'))
  // .then(dropTable(mocks.albums))
  // .catch(err => dieDieDie(`failed to drop ${mocks.albums.name}: ${err}`))
  // .then(primeTable(mocks.albums))
  // .catch(err => dieDieDie(`failed to prime ${mocks.albums.name}: ${err}`))
  // .then(() => mongoose.connection.close())
  // .catch(err => dieDieDie(`failed to close db connection: ${err}`))
  // .then(() => console.log('complete'))

  // const promises = _.chain(mocks)
  //   .keys()
  //   .map(k => [
  //     dropTable(mocks[k]),
  //     primeTable(mocks[k]),
  //     completeTable(mocks[k])
  //   ])
  //   .flatten()
  //   .value()
}

run().catch(err => console.error(`error: ${err}`))

// === MAIN ===
// dbConnect()
//   .catch(err => dieDieDie(`failed to connect to mongoose: ${err}`))
//   .then(dropArticles)
//   .then(primeArticles)
//   .then(dropAlbums)
//   .then(primeAlbums)
//   .then(dropUsers)
//   .then(primeUsers)
//   .catch(dieDieDie)
//   .then(waitToComplete)

// // === HELPERS ===

function dieDieDie (msg) {
  console.error(msg)
  process.exit(-1)
}

// // === ARTICLES ===
// async function dropArticles () {
//   console.log('dropping Articles collection...')
//   return mongoose.connection.dropCollection('articles')
// }

// function saveArticle (article) {
//   return new Promise((resolve, reject) => {
//     try {
//       const newArticle = new Article(article)
//       newArticle.save()
//       console.log('saved article:', newArticle)
//       resolve(newArticle)
//     } catch (err) {
//       console.error('Error saving article', err)
//       reject(err)
//     }
//   })
// }

// function primeArticles () {
//   console.log('priming Articles collection...')
//   const articles = []
//   articlesData.forEach(d => {
//     articles.push(saveArticle(d))
//   })
//   return Promise.all(articles)
// }

// // === ALBUMS ===
// async function dropAlbums () {
//   console.log('dropping Albums collection...')
//   try {
//     mongoose.connection.dropCollection('albums')
//   } catch (err) {
//     /* purposefully ignored */
//   }
// }

// function saveAlbum (album) {
//   return new Promise((resolve, reject) => {
//     try {
//       const newAlbum = new Album(album)
//       newAlbum.save()
//       console.log('saved photo album:', newAlbum)
//       resolve(newAlbum)
//     } catch (err) {
//       console.error('Error saving album:', err)
//       reject(err)
//     }
//   })
// }

// async function primeAlbums () {
//   console.log('priming Albums collection...')
//   const albums = []
//   albumsData.forEach(d => {
//     albums.push(saveAlbum(d))
//   })
//   return Promise.all(albums)
// }

// // === USERS ===
// async function dropUsers () {
//   console.log('dropping Users collection...')
//   try {
//     mongoose.connection.dropCollection('users')
//   } catch (err) {
//     /* purposefully ignored */
//   }
// }

// function saveUser (user) {
//   return new Promise((resolve, reject) => {
//     try {
//       const newUser = new User(user)
//       newUser.save()
//       console.log('saved user:', newUser)
//       resolve(newUser)
//     } catch (err) {
//       console.error('Error saving user:', err)
//       reject(err)
//     }
//   })
// }

// async function primeUsers () {
//   console.log('priming Users collection...')
//   const users = []
//   usersData.forEach(d => {
//     users.push(saveUser(d))
//   })
//   return Promise.all(users)
// }

// async function waitToComplete () {
//   console.log('waiting to complete')
//   setTimeout(async () => {
//     await dbDisconnect()
//     console.log('complete')
//     process.exit(0)
//   }, 1000)
// }
