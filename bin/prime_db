#!/usr/local/bin/node

/**
 * Prime the mongodb databse with mock data
 *
 * Design:
 *
 * 1. Connect to the database
 * 2. Loop through each mock
 * 3. Prime each collection from its mock
 *      Clear existing records from the collection
 *      Save records from the mock to the collection
 * 4. Disconnect from the database
 */

const {
  _,
  assert,
  mongoose,
  stringify,
  dbConnect,
  dbDisconnect
} = require('../lib/utils')

const mocks = require('../etc/mocks')

// This will only be called if we have failed to handle a Promise rejection correctly.
process.on('unhandledRejection', (reason, p) => {
  console.error('Unhandled Rejection at:', p, 'reason:', reason)
  process.exit(-1)
})

function dieDieDie (msg) {
  console.error(msg)
  process.exit(-1)
}

async function clearCollection (mock) {
  const { name, model } = mock
  assert(_.isNonEmptyString(name), 'mock must have a name')
  assert(_.isFunction(model), 'mock must have a model')

  // collections are automatically created by the models
  const collectionNames = _.keys(mongoose.connection.collections)
  // if we try to clear a collection that doesn't exist, ignore it
  if (!collectionNames.includes(name)) {
    console.log(`ignoring unknown collection '${name}'`)
    return
  }
  return model.deleteMany({})
}

async function saveRecord (mock, record) {
  const { name, model: Model } = mock
  assert(_.isNonEmptyString(name), 'mock must have a name')
  assert(_.isFunction(Model), 'mock must have a model')
  assert(_.isNonEmptyObject(record), 'record must be an object')
  console.log(`saving record to ${name} collection...(${stringify(record)})`)
  const newRecord = new Model(record)
  return newRecord.save()
}

async function saveRecords (mock) {
  const { name, data } = mock
  assert(_.isNonEmptyString(name), 'mock must have a name')
  assert(_.isNonEmptyArray(data), 'data must be an array')

  const promises = data.map(record => {
    return saveRecord(mock, record).catch(err =>
      console.error(`failed to save record to ${name}: ${err}`)
    )
  })

  return Promise.all(promises)
}

async function primeCollection (mock) {
  const { name, data } = mock
  console.log(`clearing ${name} collection...`)
  await clearCollection(mock)
  console.log(`saving ${data.length} records to ${name} collection...`)
  await saveRecords(mock)
}

async function primeCollections () {
  return Promise.all(_.chain(mocks).keys().map(key => {
    const mock = mocks[key]
    console.log(`priming ${mock.name} collection...`)
    return primeCollection(mock)
  }).value())
}

async function main () {
  try {
    console.log('connecting to db')
    await dbConnect()
  } catch (err) {
    dieDieDie(`failed to connect to database: ${err}`)
  }

  try {
    console.log('priming collections')
    await primeCollections()
  } catch (err) {
    dieDieDie(`failed to prime collections: ${err}`)
  }

  console.log('disconnecting from db')
  await dbDisconnect()

  console.log('All collections primed successfully!')
  process.exit(0)
}

main()
